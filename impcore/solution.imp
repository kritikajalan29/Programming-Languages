;;;;;;;;;;;;;;;;;;; CS 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;

;; Your Name: Kritika Jalan


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) returns a nonnegative integer whose decimal representation 
;; is the same as the decimal representation of integer n, except each digit 
;; appears twice. n must be positive and less than 20,000.

;; laws:
;;   (double-digit 0) == 0
;;   (double-digit (+(* 10 m)d)) == (+ (* 100 (double-digit (m))) (+ (* d 10)d))

(define double-digit (n)
    (if (= n  0)
        0
        (+ (* 100 (double-digit (/ n 10))) (+ (* (mod n 10) 10) (mod n 10)))))

        ;; UNIT - TESTS
        (check-expect (double-digit 0) 0)
        (check-expect (double-digit 12) 1122)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) returns the number of 1 bits in the binary
;; representation of integer n.

;; laws:
;;   (population-count 0) == 0
;;   (population-count (+(* 2 m) b)) == (+ (b) (population-count (m)))

(define population-count (n)
    (if (= n 0)
        0
        (+ (mod n 2) (population-count (/ n 2))))) 

        ;; UNIT - TESTS
        (check-expect (population-count 0) 0)
        (check-expect (population-count 7) 3)
        (check-expect (population-count 12) 2)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) returns the binary representation of integer n.

;; laws:
;;   (binary 0) == 0
;;   (binary (+(* 2 m)b)) = (+(* 10 (binary m)) b) 

(define binary (n)
    (if (= n 0)
        0
        (+(* 10 (binary (/ n 2))) (mod n 2)))) 


        ;; UNIT - TESTS
        (check-expect (binary 0) 0)
        (check-expect (binary 12) 1100)
        (check-expect (binary -12) -1100)
        



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) returns the sum of the integers from m to n,
;; where m is an integer and n is an integer greater than or
;; equal to m. 

;; laws:
;;   (sigma (m m)) == m ; where n = m
;;   (sigma (m n)) == (+ (sigma (+ m 1) n) m) ; where m < n

(define sigma (m n)
    (if (= m n)
        m
        (+ (sigma (+ m 1) n) m)))
    
        ;; UNIT - TESTS
        (check-expect (sigma 9 9) 9)
        (check-expect (sigma 1 100) 5050)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5


;; (prime-helper n x) returns 0 if n has a factor greater than 1 and less than 
;; square root of x. Otherwise returns 1 .

;; laws:
;;   (prime-helper (n x)) == 1 ; where n < x^2
;;   (prime-helper (n x)) == 0 ; where n % x = 0
;;   (prime-helper (n x)) == (prime-helper n (+ x 1)) ; where n % x != 0

(define prime-helper (n x)
    (if(< n (* x x)) 
        1
        (if(= (mod n x) 0)
            0
            (prime-helper n (+ x 1)))))

        ;; UNIT - TESTS
        (check-assert (not (prime-helper 10 2)))
        (check-assert (prime-helper 11 2))

;; (prime? n) returns 1 if n is prime and 0 otherwise, where n is a
;; nonnegative integer.

;; laws:
;;   (prime? n) == 0 ; where n < 2
;;   (prime? n) == 1 ; where n = 2
;;   (prime? n) == (helper (n, x)) ; where n > 2


(define prime? (n)
    (if (< n 2)
        0
        (if (= n 2) 
            1
            (prime-helper n 2) ))) 



        ;; UNIT - TESTS
        (check-assert (not (prime? 1)))
        (check-assert (prime? 2))
        (check-assert (prime? 11))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6


;; (nthprime-helper n) returns the nth prime number greater than numOfPrimes 
;; starting from currNum

;; laws:
;;   (nthprime-helper n numOfPrimes currNum) == 
;;          (nthprime-helper n (+ numOfPrimes 1) (+ currNum 1)) 
;;          where numOfPrimes < n && currNum is a prime number
;;   (nthprime-helper n numOfPrimes currNum) == 
;;          (nthprime-helper n numOfPrimes (+ currNum 1))
;;          where numOfPrimes < n && currNum is NOT a prime number
;;   (nthprime-helper n numOfPrimes currNum) == (- currNum 1)
;;          where numOfPrimes = n


(define nthprime-helper (n numOfPrimes currNum)
    ( if (= numOfPrimes n)
        (- currNum 1)
        (if(prime? currNum)
            (nthprime-helper n (+ numOfPrimes 1) (+ currNum 1))
            (nthprime-helper n numOfPrimes (+ currNum 1)))))


        ;; UNIT - TESTS
        (check-expect (nthprime-helper 1 0 2) 2)
        (check-expect (nthprime-helper 100 0 2) 541)

;; (nthprime n) returns the nth prime number where n is a positive integer

;; laws:
;;   (nthprime n) == (nthprime-helper n 0 2) , where n > 0
      
    
(define nthprime (n)
    (nthprime-helper n 0 2))
    

        ;; UNIT - TESTS
        (check-expect (nthprime 1) 2)
        (check-expect (nthprime 100) 541)
